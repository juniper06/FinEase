// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int    @id @default(autoincrement())
  email     String @unique
  password  String
  firstName String
  lastName  String
  Project Project[]
}

model Project {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  projectName   String
  projectCode   String
  billingMethod String
  description   String
  totalExpenses Int

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  projectUsers     ProjectUser[]
  ProjectResources ProjectResource[]
}

model ProjectUser {
  id        Int    @id @default(autoincrement())
  userName  String
  userEmail String

  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ProjectResource {
  id               Int    @id @default(autoincrement())
  resourceCategory String
  subCategory      String
  expense          Int

  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Customer {
  id          Int    @id @default(autoincrement())
  type        String
  firstName   String
  lastName    String
  companyName String
  email       String
  phoneNumber String
  country     String
  city        String
  state       String
  zipCode     Int

  invoices Invoice[]
  payments  Payment[]
}

model Invoice {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  invoiceNumber String
  dueDate       DateTime
  customerId Int
  customers  Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId Int
  items  Item @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Category {
  id           Int    @id @default(autoincrement())
  categoryName String
}

model Expenses {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  transactionDate DateTime
  amount          Int
  modeOfPayment   String
  referenceNumber String   @unique
  categoryId Int
  categories Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Item {
  id          Int    @id @default(autoincrement())
  type        String
  name        String
  unit        String
  description String
  price       Float
}

model Payment {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  dateOfPayment   DateTime
  paymentNumber   String
  modeOfPayment   String
  referenceNumber String
  totalAmount     Float

  customerId Int
  customers  Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  invoiceId Int
  invoices Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model PaymentItem {
  id     Int   @id @default(autoincrement())
  amount Float
  paymentId Int
  payment   Payment @relation(fields: [paymentId], references: [id])
  invoiceId Int
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
}